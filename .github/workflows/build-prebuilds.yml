name: Build Prebuilt Binaries

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: darwin-arm64
            os: macos-latest
            arch: arm64
            go_os: darwin
            go_arch: arm64
            
          - platform: darwin-x64
            os: macos-latest
            arch: x64
            go_os: darwin
            go_arch: amd64
            
          # Linux builds
          - platform: linux-x64
            os: ubuntu-latest
            arch: x64
            go_os: linux
            go_arch: amd64
            
          - platform: linux-arm64
            os: ubuntu-latest
            arch: arm64
            go_os: linux
            go_arch: arm64
            
          # Windows builds
          - platform: win32-x64
            os: windows-latest
            arch: x64
            go_os: windows
            go_arch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: |
          node-client-v2/package-lock.json
          addon/package-lock.json

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Setup Python (for node-gyp)
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Linux ARM64 specific setup
    - name: Setup Linux ARM64 cross-compilation
      if: matrix.platform == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
        echo "LINK=aarch64-linux-gnu-g++" >> $GITHUB_ENV

    # Windows specific setup
    - name: Setup Windows build tools
      if: runner.os == 'Windows'
      run: |
        npm install --global windows-build-tools --vs2015
      continue-on-error: true

    - name: Install dependencies
      run: |
        cd node-client-v2
        npm ci
        cd ../addon
        npm ci

    - name: Build Go shared library
      env:
        GOOS: ${{ matrix.go_os }}
        GOARCH: ${{ matrix.go_arch }}
        CGO_ENABLED: 1
      run: |
        cd cgo
        mkdir -p ../node-client-v2/prebuilds/${{ matrix.platform }}
        
        # Set output file extension based on platform
        if [ "${{ matrix.go_os }}" = "windows" ]; then
          OUTPUT_FILE="../node-client-v2/prebuilds/${{ matrix.platform }}/librocketmq_cgo.dll"
        elif [ "${{ matrix.go_os }}" = "darwin" ]; then
          OUTPUT_FILE="../node-client-v2/prebuilds/${{ matrix.platform }}/librocketmq_cgo.dylib"
        else
          OUTPUT_FILE="../node-client-v2/prebuilds/${{ matrix.platform }}/librocketmq_cgo.so"
        fi
        
        go build -buildmode=c-shared -o "$OUTPUT_FILE" rocketmq_cgo.go
        ls -la "$OUTPUT_FILE"

    - name: Build Node.js addon
      env:
        npm_config_target_arch: ${{ matrix.arch }}
        npm_config_target_platform: ${{ matrix.go_os }}
        npm_config_cache: /tmp/.npm
        npm_config_build_from_source: true
      run: |
        cd addon
        
        # Set cross-compilation environment for ARM64
        if [ "${{ matrix.platform }}" = "linux-arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export AR=aarch64-linux-gnu-ar
          export STRIP=aarch64-linux-gnu-strip
          export LINK=aarch64-linux-gnu-g++
          npm config set target_arch arm64
        fi
        
        npm run build
        
        # Copy to prebuilds directory
        mkdir -p ../node-client-v2/prebuilds/${{ matrix.platform }}
        cp build/Release/rocketmq_addon.node ../node-client-v2/prebuilds/${{ matrix.platform }}/
        ls -la ../node-client-v2/prebuilds/${{ matrix.platform }}/

    - name: Test binary loading
      if: matrix.platform == 'darwin-arm64' || matrix.platform == 'linux-x64' || matrix.platform == 'win32-x64'
      run: |
        cd node-client-v2
        npm run build
        node -e "
          const { getPlatformInfo, loadNativeAddon } = require('./dist/platform-loader');
          console.log('Platform:', getPlatformInfo());
          try {
            const addon = loadNativeAddon();
            console.log('✅ Successfully loaded addon');
          } catch (err) {
            console.error('❌ Failed to load addon:', err.message);
            process.exit(1);
          }
        "

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: prebuilds-${{ matrix.platform }}
        path: node-client-v2/prebuilds/${{ matrix.platform }}/
        retention-days: 30

  # Combine all prebuilds into a single artifact
  combine:
    name: Combine Prebuilds
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Combine prebuilds
      run: |
        mkdir -p node-client-v2/prebuilds
        
        # Copy all platform builds
        for platform in darwin-arm64 darwin-x64 linux-x64 linux-arm64 win32-x64; do
          if [ -d "artifacts/prebuilds-$platform" ]; then
            mkdir -p "node-client-v2/prebuilds/$platform"
            cp -r "artifacts/prebuilds-$platform/"* "node-client-v2/prebuilds/$platform/"
            echo "✅ Copied $platform prebuilds"
          else
            echo "⚠️  Missing $platform prebuilds"
          fi
        done
        
        # Show final structure
        find node-client-v2/prebuilds -type f -exec ls -la {} \;

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Build TypeScript SDK
      run: |
        cd node-client-v2
        npm ci
        npm run build

    - name: Test all platforms
      run: |
        cd node-client-v2
        node scripts/build-all-platforms.js check

    - name: Upload combined prebuilds
      uses: actions/upload-artifact@v4
      with:
        name: rocketmq-native-sdk-prebuilds
        path: |
          node-client-v2/prebuilds/
          node-client-v2/dist/
          node-client-v2/package.json
          node-client-v2/README.md
        retention-days: 90

    - name: Create release assets (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        cd node-client-v2
        tar -czf ../rocketmq-native-sdk-${{ github.ref_name }}-prebuilds.tar.gz prebuilds/ dist/ package.json README.md
        
    - name: Upload release assets
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: rocketmq-native-sdk-*.tar.gz 