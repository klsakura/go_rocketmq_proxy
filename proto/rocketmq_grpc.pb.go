// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/rocketmq.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RocketMQProxy_CreateProducer_FullMethodName         = "/rocketmq.RocketMQProxy/CreateProducer"
	RocketMQProxy_SendMessage_FullMethodName            = "/rocketmq.RocketMQProxy/SendMessage"
	RocketMQProxy_SendOrderedMessage_FullMethodName     = "/rocketmq.RocketMQProxy/SendOrderedMessage"
	RocketMQProxy_SendDelayMessage_FullMethodName       = "/rocketmq.RocketMQProxy/SendDelayMessage"
	RocketMQProxy_SendTransactionMessage_FullMethodName = "/rocketmq.RocketMQProxy/SendTransactionMessage"
	RocketMQProxy_CreateConsumer_FullMethodName         = "/rocketmq.RocketMQProxy/CreateConsumer"
	RocketMQProxy_ReceiveMessages_FullMethodName        = "/rocketmq.RocketMQProxy/ReceiveMessages"
	RocketMQProxy_AckMessage_FullMethodName             = "/rocketmq.RocketMQProxy/AckMessage"
	RocketMQProxy_CleanupProducer_FullMethodName        = "/rocketmq.RocketMQProxy/CleanupProducer"
	RocketMQProxy_CleanupConsumer_FullMethodName        = "/rocketmq.RocketMQProxy/CleanupConsumer"
	RocketMQProxy_HealthCheck_FullMethodName            = "/rocketmq.RocketMQProxy/HealthCheck"
)

// RocketMQProxyClient is the client API for RocketMQProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RocketMQ代理服务
type RocketMQProxyClient interface {
	// 创建生产者
	CreateProducer(ctx context.Context, in *CreateProducerRequest, opts ...grpc.CallOption) (*CreateProducerResponse, error)
	// 发送普通消息
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// 发送顺序消息
	SendOrderedMessage(ctx context.Context, in *SendOrderedMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// 发送延迟消息
	SendDelayMessage(ctx context.Context, in *SendDelayMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// 发送事务消息
	SendTransactionMessage(ctx context.Context, in *SendTransactionMessageRequest, opts ...grpc.CallOption) (*SendTransactionMessageResponse, error)
	// 创建消费者
	CreateConsumer(ctx context.Context, in *CreateConsumerRequest, opts ...grpc.CallOption) (*CreateConsumerResponse, error)
	// 接收消息 (流式)
	ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	// 确认消息
	AckMessage(ctx context.Context, in *AckMessageRequest, opts ...grpc.CallOption) (*AckMessageResponse, error)
	// 清理生产者
	CleanupProducer(ctx context.Context, in *CleanupProducerRequest, opts ...grpc.CallOption) (*CleanupProducerResponse, error)
	// 清理消费者
	CleanupConsumer(ctx context.Context, in *CleanupConsumerRequest, opts ...grpc.CallOption) (*CleanupConsumerResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type rocketMQProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewRocketMQProxyClient(cc grpc.ClientConnInterface) RocketMQProxyClient {
	return &rocketMQProxyClient{cc}
}

func (c *rocketMQProxyClient) CreateProducer(ctx context.Context, in *CreateProducerRequest, opts ...grpc.CallOption) (*CreateProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProducerResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_CreateProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) SendOrderedMessage(ctx context.Context, in *SendOrderedMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_SendOrderedMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) SendDelayMessage(ctx context.Context, in *SendDelayMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_SendDelayMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) SendTransactionMessage(ctx context.Context, in *SendTransactionMessageRequest, opts ...grpc.CallOption) (*SendTransactionMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTransactionMessageResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_SendTransactionMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) CreateConsumer(ctx context.Context, in *CreateConsumerRequest, opts ...grpc.CallOption) (*CreateConsumerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsumerResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_CreateConsumer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RocketMQProxy_ServiceDesc.Streams[0], RocketMQProxy_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessagesRequest, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RocketMQProxy_ReceiveMessagesClient = grpc.ServerStreamingClient[Message]

func (c *rocketMQProxyClient) AckMessage(ctx context.Context, in *AckMessageRequest, opts ...grpc.CallOption) (*AckMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckMessageResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_AckMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) CleanupProducer(ctx context.Context, in *CleanupProducerRequest, opts ...grpc.CallOption) (*CleanupProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupProducerResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_CleanupProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) CleanupConsumer(ctx context.Context, in *CleanupConsumerRequest, opts ...grpc.CallOption) (*CleanupConsumerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupConsumerResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_CleanupConsumer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQProxyClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RocketMQProxy_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RocketMQProxyServer is the server API for RocketMQProxy service.
// All implementations must embed UnimplementedRocketMQProxyServer
// for forward compatibility.
//
// RocketMQ代理服务
type RocketMQProxyServer interface {
	// 创建生产者
	CreateProducer(context.Context, *CreateProducerRequest) (*CreateProducerResponse, error)
	// 发送普通消息
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// 发送顺序消息
	SendOrderedMessage(context.Context, *SendOrderedMessageRequest) (*SendMessageResponse, error)
	// 发送延迟消息
	SendDelayMessage(context.Context, *SendDelayMessageRequest) (*SendMessageResponse, error)
	// 发送事务消息
	SendTransactionMessage(context.Context, *SendTransactionMessageRequest) (*SendTransactionMessageResponse, error)
	// 创建消费者
	CreateConsumer(context.Context, *CreateConsumerRequest) (*CreateConsumerResponse, error)
	// 接收消息 (流式)
	ReceiveMessages(*ReceiveMessagesRequest, grpc.ServerStreamingServer[Message]) error
	// 确认消息
	AckMessage(context.Context, *AckMessageRequest) (*AckMessageResponse, error)
	// 清理生产者
	CleanupProducer(context.Context, *CleanupProducerRequest) (*CleanupProducerResponse, error)
	// 清理消费者
	CleanupConsumer(context.Context, *CleanupConsumerRequest) (*CleanupConsumerResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedRocketMQProxyServer()
}

// UnimplementedRocketMQProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRocketMQProxyServer struct{}

func (UnimplementedRocketMQProxyServer) CreateProducer(context.Context, *CreateProducerRequest) (*CreateProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProducer not implemented")
}
func (UnimplementedRocketMQProxyServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRocketMQProxyServer) SendOrderedMessage(context.Context, *SendOrderedMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrderedMessage not implemented")
}
func (UnimplementedRocketMQProxyServer) SendDelayMessage(context.Context, *SendDelayMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDelayMessage not implemented")
}
func (UnimplementedRocketMQProxyServer) SendTransactionMessage(context.Context, *SendTransactionMessageRequest) (*SendTransactionMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionMessage not implemented")
}
func (UnimplementedRocketMQProxyServer) CreateConsumer(context.Context, *CreateConsumerRequest) (*CreateConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumer not implemented")
}
func (UnimplementedRocketMQProxyServer) ReceiveMessages(*ReceiveMessagesRequest, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedRocketMQProxyServer) AckMessage(context.Context, *AckMessageRequest) (*AckMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMessage not implemented")
}
func (UnimplementedRocketMQProxyServer) CleanupProducer(context.Context, *CleanupProducerRequest) (*CleanupProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupProducer not implemented")
}
func (UnimplementedRocketMQProxyServer) CleanupConsumer(context.Context, *CleanupConsumerRequest) (*CleanupConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupConsumer not implemented")
}
func (UnimplementedRocketMQProxyServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRocketMQProxyServer) mustEmbedUnimplementedRocketMQProxyServer() {}
func (UnimplementedRocketMQProxyServer) testEmbeddedByValue()                       {}

// UnsafeRocketMQProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RocketMQProxyServer will
// result in compilation errors.
type UnsafeRocketMQProxyServer interface {
	mustEmbedUnimplementedRocketMQProxyServer()
}

func RegisterRocketMQProxyServer(s grpc.ServiceRegistrar, srv RocketMQProxyServer) {
	// If the following call pancis, it indicates UnimplementedRocketMQProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RocketMQProxy_ServiceDesc, srv)
}

func _RocketMQProxy_CreateProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).CreateProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_CreateProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).CreateProducer(ctx, req.(*CreateProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_SendOrderedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOrderedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).SendOrderedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_SendOrderedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).SendOrderedMessage(ctx, req.(*SendOrderedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_SendDelayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDelayMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).SendDelayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_SendDelayMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).SendDelayMessage(ctx, req.(*SendDelayMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_SendTransactionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).SendTransactionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_SendTransactionMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).SendTransactionMessage(ctx, req.(*SendTransactionMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_CreateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).CreateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_CreateConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).CreateConsumer(ctx, req.(*CreateConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RocketMQProxyServer).ReceiveMessages(m, &grpc.GenericServerStream[ReceiveMessagesRequest, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RocketMQProxy_ReceiveMessagesServer = grpc.ServerStreamingServer[Message]

func _RocketMQProxy_AckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).AckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_AckMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).AckMessage(ctx, req.(*AckMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_CleanupProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).CleanupProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_CleanupProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).CleanupProducer(ctx, req.(*CleanupProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_CleanupConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).CleanupConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_CleanupConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).CleanupConsumer(ctx, req.(*CleanupConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQProxy_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQProxyServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQProxy_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQProxyServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RocketMQProxy_ServiceDesc is the grpc.ServiceDesc for RocketMQProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RocketMQProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rocketmq.RocketMQProxy",
	HandlerType: (*RocketMQProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProducer",
			Handler:    _RocketMQProxy_CreateProducer_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _RocketMQProxy_SendMessage_Handler,
		},
		{
			MethodName: "SendOrderedMessage",
			Handler:    _RocketMQProxy_SendOrderedMessage_Handler,
		},
		{
			MethodName: "SendDelayMessage",
			Handler:    _RocketMQProxy_SendDelayMessage_Handler,
		},
		{
			MethodName: "SendTransactionMessage",
			Handler:    _RocketMQProxy_SendTransactionMessage_Handler,
		},
		{
			MethodName: "CreateConsumer",
			Handler:    _RocketMQProxy_CreateConsumer_Handler,
		},
		{
			MethodName: "AckMessage",
			Handler:    _RocketMQProxy_AckMessage_Handler,
		},
		{
			MethodName: "CleanupProducer",
			Handler:    _RocketMQProxy_CleanupProducer_Handler,
		},
		{
			MethodName: "CleanupConsumer",
			Handler:    _RocketMQProxy_CleanupConsumer_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RocketMQProxy_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _RocketMQProxy_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rocketmq.proto",
}
